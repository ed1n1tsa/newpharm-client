/*import TelegramBot from 'node-telegram-bot-api'
import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'
dotenv.config()

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true })
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY)

const userStates = {} // –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Ä–∞—á —É–∂–µ
  const { data: doctor } = await supabase
    .from('doctors')
    .select('*')
    .eq('telegram_id', chatId)
    .maybeSingle()

  if (doctor) {
    return bot.sendMessage(
      chatId,
      `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, ${doctor.full_name}!\n–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ ${
        doctor.specialization || '–≤—Ä–∞—á'
      }.`
    )
  }

  bot.sendMessage(
    chatId,
    `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É NewPharm!\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–§–ò–û</b>:`,
    { parse_mode: 'HTML' }
  )
  userStates[chatId] = { step: 'full_name' }
})

bot.on('message', async (msg) => {
  const chatId = msg.chat.id
  const text = msg.text
  if (!userStates[chatId]) return

  const state = userStates[chatId]

  switch (state.step) {
    case 'full_name':
      state.full_name = text
      state.step = 'specialization'
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –¢–µ—Ä–∞–ø–µ–≤—Ç, –õ–û–†, –ü–µ–¥–∏–∞—Ç—Ä):')
      break

    case 'specialization':
      state.specialization = text
      state.step = 'experience'
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Å—Ç–∞–∂ (–≤ –≥–æ–¥–∞—Ö):')
      break

    case 'experience':
      state.experience = parseInt(text) || 0
      state.step = 'qualification'
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –í—ã—Å—à–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è):')
      break

    case 'qualification':
      state.qualification = text
      state.step = 'phone'
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à üì± –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
      break

    case 'phone':
      state.phone = text
      state.step = 'code'
      bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ üîë –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ (–≤—ã–¥–∞—ë—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º):')
      break

    case 'code':
      state.access_code = text

      const { error } = await supabase.from('doctors').insert([
        {
          telegram_id: chatId,
          full_name: state.full_name,
          specialization: state.specialization,
          experience: state.experience,
          qualification: state.qualification,
          phone: state.phone,
          access_code: state.access_code,
          is_verified: true,
          created_at: new Date().toISOString(),
        },
      ])

      if (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', error)
        bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
      } else {
        bot.sendMessage(
          chatId,
          `‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${state.full_name}.\n–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${state.specialization}\n–°—Ç–∞–∂: ${state.experience} –ª–µ—Ç\n–†–æ–ª—å: ü©∫ –í—Ä–∞—á`
        )
      }

      delete userStates[chatId]
      break
  }
})
*/