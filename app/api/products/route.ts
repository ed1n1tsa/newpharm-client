import { NextResponse } from "next/server";
import { supabaseAdmin } from "@/lib/supabase-admin"; // —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Supabase

function getAuthHeader() {
  const token = Buffer.from(`${process.env.ONEC_USER}:${process.env.ONEC_PASS}`).toString("base64");
  return `Basic ${token}`;
}

// üß† –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
function detectCategory(name: string): string {
  const lower = name.toLowerCase();

  if (lower.includes("—Ç–∞–±") || lower.includes("–∞–º–ø") || lower.includes("–º–≥")) return "–õ–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞";
  if (lower.includes("–≤–∏—Ç–∞–º–∏–Ω") || lower.includes("b12") || lower.includes("b6") || lower.includes("–æ–º–µ–≥–∞")) return "–í–∏—Ç–∞–º–∏–Ω—ã –∏ –ë–ê–î—ã";
  if (lower.includes("—Å–ø—Ä–µ–π") || lower.includes("—Ä–∞—Å—Ç–≤–æ—Ä") || lower.includes("–º–∞–∑—å") || lower.includes("–∫–∞–ø–ª–∏")) return "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã";
  if (lower.includes("–º–∞—Å–ª–æ") || lower.includes("–≥–µ–ª—å") || lower.includes("—É—Ö–æ–¥")) return "–ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ —É—Ö–æ–¥";
  if (lower.includes("–¥–µ—Ç") || lower.includes("–ø—É—Å—Ç—ã—à–∫–∞") || lower.includes("–ø–µ–ª–µ–Ω–∫") || lower.includes("–Ω–∞–≥—Ä—É–¥–Ω–∏–∫")) return "–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–µ—Ç–µ–π";
  if (lower.includes("—Ç–µ—Å—Ç") || lower.includes("—Ç–µ—Ä–º–æ–º–µ—Ç—Ä") || lower.includes("—Ç–æ–Ω–æ–º–µ—Ç—Ä")) return "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–∏–±–æ—Ä—ã";
  if (lower.includes("—Ç—Ä–∞–≤") || lower.includes("—á–∞–π") || lower.includes("–∫–∞—Ä–∫–∞–¥–µ")) return "–¢—Ä–∞–≤—ã –∏ —Å–±–æ—Ä—ã";

  return "–ü—Ä–æ—á–µ–µ";
}

export async function GET() {
  const url = `${process.env.ONEC_BASE_URL}/counterparties/counterparties_list`;
  console.log("üîó –ó–∞–ø—Ä–æ—Å –∫ 1–°:", url);

  try {
    // ‚ùó –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º SSL-–ø—Ä–æ–≤–µ—Ä–∫—É (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ https.Agent)
    process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

    const res = await fetch(url, {
      method: "GET",
      headers: { Authorization: getAuthHeader() },
      cache: "no-store",
    });

    console.log("üì° –°—Ç–∞—Ç—É—Å:", res.status);

    if (!res.ok) {
      const text = await res.text();
      console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ 1–°:", text);
      return NextResponse.json({ error: `–û—à–∏–±–∫–∞ 1–°: ${res.status}`, details: text }, { status: res.status });
    }

    const data = await res.json();

    // üß© –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    const uniqueMap = new Map<string, any>();
    for (const item of data) {
      if (!uniqueMap.has(item.Id)) {
        uniqueMap.set(item.Id, item);
      }
    }

    const uniqueProducts = Array.from(uniqueMap.values());

    // üß© –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç–æ–≤–∞—Ä—ã
    const categoriesMap = new Map<string, { id: string; name: string }>();
    const products = uniqueProducts.map((item: any) => {
      const categoryName = detectCategory(item.Name);
      const categoryId = categoryName.toLowerCase().replace(/\s+/g, "-");

      if (!categoriesMap.has(categoryId)) {
        categoriesMap.set(categoryId, { id: categoryId, name: categoryName });
      }

      const stock = item.–°–∫–ª–∞–¥—ã?.reduce((sum: number, s: any) => sum + (s.Ostatok || 0), 0) || 0;

      return {
        id: item.Id,
        name: item.Name,
        price: Number(item.Price ?? 0),
        image_url: "/images/product.png",
        category: categoryName,
        stock,
        updated_at: new Date().toISOString(),
      };
    });

    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ (${categoriesMap.size} –∫–∞—Ç–µ–≥–æ—Ä–∏–π)`);

    // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ Supabase
    const { error: catError } = await supabaseAdmin
      .from("categories")
      .upsert(Array.from(categoriesMap.values()), { onConflict: "id" });

    if (catError) console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:", catError);

    // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ Supabase
    const { error: prodError } = await supabaseAdmin
      .from("products")
      .upsert(products, { onConflict: "id" });

    if (prodError) console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:", prodError);

    return NextResponse.json({
      ok: true,
      categories: categoriesMap.size,
      products: products.length,
    });
  } catch (err: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å 1–°:", err.message);
    return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å 1–°", details: err.message }, { status: 500 });
  }
}
