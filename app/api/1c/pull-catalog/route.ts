import { NextResponse } from "next/server";
import { supabaseAdmin } from "@/lib/supabase-admin";
import OpenAI from "openai";
import https from "https";

// üîê –ë–∞–∑–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è 1–°
function basicAuth() {
  const token = Buffer.from(`${process.env.ONEC_USER}:${process.env.ONEC_PASS}`).toString("base64");
  return `Basic ${token}`;
}

// üß© –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
function detectCategory(name: string): string {
  const lower = name.toLowerCase();
  if (lower.includes("—Ç–∞–±") || lower.includes("–∞–º–ø") || lower.includes("–º–≥")) return "–õ–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞";
  if (lower.includes("–≤–∏—Ç–∞–º–∏–Ω") || lower.includes("–æ–º–µ–≥–∞")) return "–í–∏—Ç–∞–º–∏–Ω—ã –∏ –ë–ê–î—ã";
  if (lower.includes("—Å–ø—Ä–µ–π") || lower.includes("–º–∞–∑—å") || lower.includes("–∫–∞–ø–ª–∏")) return "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç—ã";
  if (lower.includes("–º–∞—Å–ª–æ") || lower.includes("–≥–µ–ª—å") || lower.includes("—É—Ö–æ–¥")) return "–ö–æ—Å–º–µ—Ç–∏–∫–∞ –∏ —É—Ö–æ–¥";
  if (lower.includes("–¥–µ—Ç")) return "–¢–æ–≤–∞—Ä—ã –¥–ª—è –¥–µ—Ç–µ–π";
  if (lower.includes("—Ç–µ—Å—Ç") || lower.includes("—Ç–µ—Ä–º–æ–º–µ—Ç—Ä")) return "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø—Ä–∏–±–æ—Ä—ã";
  if (lower.includes("—Ç—Ä–∞–≤")) return "–¢—Ä–∞–≤—ã –∏ —Å–±–æ—Ä—ã";
  return "–ü—Ä–æ—á–µ–µ";
}

// üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY!,
});

// üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ 1–° (–ø–æ 1000 —Ç–æ–≤–∞—Ä–æ–≤)
export async function GET() {
  const url = `${process.env.ONEC_BASE_URL}/counterparties/counterparties_list`;
  const sb = supabaseAdmin;

  try {
    console.log("üîÑ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ 1–°:", url);

    process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0"; // üëà –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL

    const res = await fetch(url, {
      headers: { Authorization: basicAuth() },
      cache: "no-store",
    });
    

    if (!res.ok) {
      const txt = await res.text();
      throw new Error(`–û—à–∏–±–∫–∞ 1–° (${res.status}): ${txt}`);
    }

    const data = await res.json();
    console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ 1–°: ${data.length} —Ç–æ–≤–∞—Ä–æ–≤`);

    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ Id
    const unique = new Map<string, any>();
    for (const item of data) {
      if (!unique.has(item.Id)) unique.set(item.Id, item);
    }

    const allProducts = Array.from(unique.values());
    const batchSize = 1000;

    // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
    const { data: processedRows } = await sb
      .from("products")
      .select("external_id_1c");

    const processedSet = new Set(processedRows?.map(p => p.external_id_1c));

    // üß© –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â—ë –Ω–µ—Ç
    const remaining = allProducts.filter(it => !processedSet.has(String(it.Id)));

    // üßÆ –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é 1000–∫—É
    const batch = remaining.slice(0, batchSize);
    console.log(`üöÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${batch.length} —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ ${remaining.length} –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è...`);

    const products = [];

    for (const it of batch) {
      const name = it.Name ?? "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
      const category = detectCategory(name);
      const price = Number(it.Price ?? 0);
      const stock = it.–°–∫–ª–∞–¥—ã?.reduce((sum: number, s: any) => sum + (s.Ostatok || 0), 0) || 0;

      let short_desc = null;
      let full_desc = null;

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —á–µ—Ä–µ–∑ GPT
      try {
        const prompt = `–¢—ã ‚Äî –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∞–ø—Ç–µ–∫–∏. –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ "${name}". –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`;

        const ai = await openai.chat.completions.create({
          model: "gpt-4o-mini",
          messages: [{ role: "user", content: prompt }],
          max_tokens: 150,
        });

        const text = ai.choices[0].message?.content || "";
        const [short, ...rest] = text.split(". ");
        short_desc = short + ".";
        full_desc = text;

        console.log(`‚ú® GPT –æ–ø–∏—Å–∞–ª —Ç–æ–≤–∞—Ä: ${name}`);
      } catch (err: any) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è ${name}: ${err.message}`);
      }

      products.push({
        external_id_1c: String(it.Id),
        name,
        category,
        price,
        stock,
        image_url: "/images/product.png",
        updated_at: new Date().toISOString(),
        is_active: true,
        short_desc,
        full_desc,
      });
    }

    // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ Supabase
    const { error } = await sb.from("products").upsert(products, { onConflict: "external_id_1c" });
    if (error) throw error;

    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`);

    // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await sb.from("integration_1c_queue").insert({
      direction: "in",
      kind: "catalog",
      status: "imported",
      payload_json: {
        imported_now: products.length,
        remaining: remaining.length - products.length,
        ai_generated: true,
      },
    });

    return NextResponse.json({
      ok: true,
      imported_now: products.length,
      remaining: remaining.length - products.length,
    });
  } catch (err: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:", err.message);

    await sb.from("integration_1c_queue").insert({
      direction: "in",
      kind: "catalog",
      status: "error",
      payload_json: { error: err.message },
    });

    return NextResponse.json({ ok: false, error: err.message }, { status: 500 });
  }
}